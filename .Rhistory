phi2_2 = 0.5,
isom_init = 0.7,
isos_init = 0.9){
calib <- calibsList[[provinceName]]
ff <- calib$forecast_args
pars <- ff$base_params
##Do these manually I guess.
#pars[["E0"]] <- coef(calib, "fitted")$params["E0"]
#pars[["beta0"]] <- coef(calib, "fitted")$params["beta0"]
#pars[["phi1"]] <- coef(calib, "fitted")$params["phi1"]
##The below line does the same thing. Lee, I'm leaving the above three in there so you can see.
pars[names(coef(calib, "fitted")$params)] <- coef(calib, "fitted")$params
##Stil don't now why this didn't work.
#pars <- update(pars, ff$opt_pars$params)
##The only thing that changes between scenarios is the time_pars.
if (scenario == 1){
##Status quo
time_pars <- NULL
}
else if (scenario == 2){
##Lockdown then relax six weeks after.
##Six weeks after is Jan 29th, 2021
time_pars <- data.frame(Date=c("2020-12-18", "2021-01-29"),
Symbol=c("beta0", "beta0"),
Relative_value=c(lockdown_beta0, lockdown_relax),
stringsAsFactors=FALSE)
}
else if (scenario == 3){
##ICU's fill up and then clear exactly a month later.
time_pars <- data.frame(Date=c("2020-01-15", "2021-02-15"),
Symbol=c("phi2", "phi2"),
Relative_value=c(phi2_1, phi2_2),
stringsAsFactors=FALSE)
}
else if (scenario == 4){
##Social distancing protocols are implemented.
time_pars <- data.frame(Date=c("2020-12-18", "2020-12-18", "2021-02-18", "2021-02-18"),
Symbol=c("iso_m", "iso_s", "iso_m", "iso_s"),
Relative_value=c(isom_init, isos_init, 1, 1),
stringsAsFactors=FALSE)
}
else{
}
sim <- run_sim(pars, start_date = sd, end_date = ed, params_timevar = time_pars)
return(sim)
}
##Plot a calibrated simulation, changing the provinceName to whatever we want it to be..
test_calib_plot <- function(provinceName, calibslist = goodcalibs, reportlist = splitintervalCases, deathlist = splitintervaldeaths, hosplist = splitintervalhosp){
dd <-  bind_rows(splitintervalCases[[provinceName]], splitintervaldeaths[[provinceName]])
##We might need to order by date, so it's safer to.
dd <- dd[order(anytime::anydate(dd$date)),]
plot(calibslist[[provinceName]], data = dd, predict_args=list(keep_vars=c("report", "death")))
}
##Test a forecast by plotting it on the same graph as the observed report data and the calibrate to it.
test_forecast_plot <- function(provinceName, sim = forecast_province(provinceName)){
plot(sim, drop_states = c("S", "R", "I", "cumRep", "E", "X", "D", "incidence", "ICU", "H")) +
##Add observed reported cases to the plot
geom_point(data = splitintervalCases[[provinceName]],
mapping = aes(x = date, y = value)) +
##Add observed deaths to the plot
geom_point(data = splitintervaldeaths[[provinceName]],
mapping = aes(x = date, y = value))
#+
##Add observed hospitalizations to the plot
#geom_point(data = splitintervalhosp[[provinceName]],
#           mapping = aes(x = date, y = value))
}
goodcalibs <- calibrate_good()
test_calib_plot("ON")
test_calib_plot("SK")
test_calib_plot("AB")
test_calib_plot("QC")
library("dplyr") # For nice data frame manipulation
library("anytime") # Date/Time manipulation
library("lubridate") # Date/Time manipulation
library("chron") # Date/Time manipulation
library("ggplot2") # For fancy plots
library("epigrowthfit") # For pandemic model parameter estimation
library("McMasterPandemic") # For COVID-19 Pandemic Simulations and Forecasting
allcases <- read.csv("mikelidata.csv")
toKeep <- c("AB", "BC", "ON", "SK", "MB", "QC")
allcases <- allcases[allcases$Province %in% toKeep,]
pops <- c("AB" = 4421876,
"BC" = 5147712,
"ON" = 14734000,
"SK" = 1178681,
"MB" = 1379263,
"QC" = 8574571)
startdate <- anytime::anydate("2020-08-15")
splitinterval <- function(var){
if (var == "report"){
## colselect grabs the data from the main data frame and var tells the calibration function what variable the data is.
colselect <- "confirmed_positive"
var <- "report"
}
else if (var == "deaths"){
colselect <- "deceased"
var <- "death"
}
else{
colselect <- "Hospitalization"
var <-  "H"
}
lapply(as.vector(unique(allcases$Province)), function(provinceName){
## Select all the data corresponding to each province
casesdf <- allcases[as.vector(allcases$Province) == provinceName,]
## Remove missing values
casesdf <- casesdf[!is.na(casesdf[,colselect]),]
## Create interval incidence column by differencing
# Discard the first reported entry to align all the columns and keep them the same length, keeping the column for each province as a check to make sure we're doing everything properly.
intervalcasesdf <- bind_cols("Date" = casesdf$"Date",
"Province" =  casesdf$"Province",
"Note" = casesdf$"Note",
"intervalCases" = c(0, diff(casesdf[,colselect], lag = 1)))
## Removal of negative values
intervalcasesdf <- intervalcasesdf[intervalcasesdf$intervalCases >= 0,]
## Converting data to "long form" so that it can be passed to calibrate
colnames(intervalcasesdf) <- c("date", "a", "b", "value")
intervalcasesdf <- intervalcasesdf[,-c(2,3)]
intervalcasesdf$var <- rep(var, nrow(intervalcasesdf))
intervalcasesdf$date <- anytime::anydate(intervalcasesdf$date)
## Filtering data to begin at second wave (using startdate)
if (provinceName == "MB"){
startdate <- anytime::anydate("2020-09-15")
}
intervalcasesdf <- intervalcasesdf[intervalcasesdf$date >= startdate,]
return(intervalcasesdf)
})
}
splitintervalCases <- splitinterval(var = "report")
splitintervaldeaths <- splitinterval(var = "deaths")
splitintervalhosp <- splitinterval(var = "hosp")
names(splitintervalhosp) <- names(splitintervalCases) <- names(splitintervaldeaths) <- unique(allcases$Province)
pars <- read_params("ICU1.csv")
pars <- update(pars, iso_m = 0.1, iso_s = 0.2)
calibrate_good <- function(){
goodcalibs <- lapply(names(splitintervalCases), function(provinceName){
dd <-  bind_rows(splitintervalCases[[provinceName]], splitintervaldeaths[[provinceName]])
## Order by date
dd <- dd[order(anytime::anydate(dd$date)),]
provincereport <- splitintervalCases[[provinceName]]
## Use epigrowthfit to estimate R0 and then fix the parameter file for each province to match the estimated rate from the data and setting Gbar = 6
data(covid_generation_interval)
pars <- fix_pars(pars, target = c(R0 = compute_R0(egf(egf_init(date = provincereport$date, cases = provincereport$value)), breaks =  covid_generation_interval$breaks, probs = covid_generation_interval$probs), Gbar = 6))
## Set population size for each province
pars <- update(pars, c(N = pops[[provinceName]]))
init_e0 <- provincereport$value[[16]]
if (init_e0 == 0){
loginit_e0 <- 2
}
else{
loginit_e0 <- log(init_e0)
}
## Parameters to be optimized are based on the calibration to Ontario by Michael Li in
# https://github.com/bbolker/McMasterPandemic/blob/master/ontario/Ontario_current.R
optpars <- list(params = c(log_E0 = loginit_e0, log_beta0 = -1, logit_phi1 = -1), log_nb_disp=c(report=1, death=1, H=1))
## Calibration to SK deaths is not done due to noise.
if (provinceName == "SK"){
dd <- dd[dd$var == "report",]
}
else{
}
## Print which province is currently being calibrated
print(paste0("now calibrating ", provinceName))
## Calibration step
calibrate(base_params = pars,
data = dd,
debug_plot = FALSE,
## sim_args below based on the calibration to Ontario in
# https://github.com/bbolker/McMasterPandemic/blob/master/ontario/Ontario_current.R
sim_args = list(ndt = 1, ratemat_args = list(testing_time = "report")),
time_args = list(break_dates = NULL),
opt_pars = optpars)
})
names(goodcalibs) <- names(splitintervalCases)
return(goodcalibs)
}
##Our method that is not as good.
##Calibrate each province based on that provinces reported cases and the same set of base parameters.
calibrate_bad <- function(){
badcalibs <- lapply(names(splitintervalCases), function(provinceName){
dd <-  bind_rows(splitintervalCases[[provinceName]], splitintervaldeaths[[provinceName]])
##We need to order by date
dd <- dd[order(anytime::anydate(dd$date)),]
if (provinceName == "SK"){
dd <- dd[dd$var == "report",]
}
else{
}
provincereport <- splitintervalCases[[provinceName]]
##Use epigrowthfit to estimate R0 and then fix the parameter file for each province to match that estimated rate from the data.
data(covid_generation_interval)
pars <- fix_pars(pars, target = c(R0 = compute_R0(egf(egf_init(date = provincereport$date, cases = provincereport$value)), breaks =  covid_generation_interval$breaks, probs = covid_generation_interval$probs), Gbar = 6))
pars <- update(pars, c(N = pops[[provinceName]]))
##So we can see what's going on.
print(paste0("now calibrating ", provinceName))
calibrate(base_params = pars,
data = dd,
time_args = list(break_dates = NULL),
opt_pars = list(params = c(beta0 = 0.1, iso_m = 0.5, iso_s=0.8)))
})
names(badcalibs) <- names(splitintervalCases)
return(badcalibs)
}
##Save a calibration so we don't have to run it again to get the same results.
savecalibs <- function(){
saveRDS(goodcalibs, "calibs.rds")
}
##Load a calibration that we saved using the filename above. Make sure calibs.rds is in your working directory.
loadcalibs <- function(){
return(readRDS("calibs.rds"))
}
forecast_province <- function(provinceName,
sd = anytime::anydate("2020-08-01"),
ed = anytime::anydate("2021-12-18"),
scenario = 1,
calibsList = goodcalibs,
lockdown_beta0 = 0.5,
lockdown_relax = 0.1,
phi2_1 = 0.1,
phi2_2 = 0.5,
isom_init = 0.7,
isos_init = 0.9){
calib <- calibsList[[provinceName]]
ff <- calib$forecast_args
pars <- ff$base_params
##Do these manually I guess.
#pars[["E0"]] <- coef(calib, "fitted")$params["E0"]
#pars[["beta0"]] <- coef(calib, "fitted")$params["beta0"]
#pars[["phi1"]] <- coef(calib, "fitted")$params["phi1"]
##The below line does the same thing. Lee, I'm leaving the above three in there so you can see.
pars[names(coef(calib, "fitted")$params)] <- coef(calib, "fitted")$params
##Stil don't now why this didn't work.
#pars <- update(pars, ff$opt_pars$params)
##The only thing that changes between scenarios is the time_pars.
if (scenario == 1){
##Status quo
time_pars <- NULL
}
else if (scenario == 2){
##Lockdown then relax six weeks after.
##Six weeks after is Jan 29th, 2021
time_pars <- data.frame(Date=c("2020-12-18", "2021-01-29"),
Symbol=c("beta0", "beta0"),
Relative_value=c(lockdown_beta0, lockdown_relax),
stringsAsFactors=FALSE)
}
else if (scenario == 3){
##ICU's fill up and then clear exactly a month later.
time_pars <- data.frame(Date=c("2020-01-15", "2021-02-15"),
Symbol=c("phi2", "phi2"),
Relative_value=c(phi2_1, phi2_2),
stringsAsFactors=FALSE)
}
else if (scenario == 4){
##Social distancing protocols are implemented.
time_pars <- data.frame(Date=c("2020-12-18", "2020-12-18", "2021-02-18", "2021-02-18"),
Symbol=c("iso_m", "iso_s", "iso_m", "iso_s"),
Relative_value=c(isom_init, isos_init, 1, 1),
stringsAsFactors=FALSE)
}
else{
}
sim <- run_sim(pars, start_date = sd, end_date = ed, params_timevar = time_pars)
return(sim)
}
##Plot a calibrated simulation, changing the provinceName to whatever we want it to be..
test_calib_plot <- function(provinceName, calibslist = goodcalibs, reportlist = splitintervalCases, deathlist = splitintervaldeaths, hosplist = splitintervalhosp){
dd <-  bind_rows(splitintervalCases[[provinceName]], splitintervaldeaths[[provinceName]])
##We might need to order by date, so it's safer to.
dd <- dd[order(anytime::anydate(dd$date)),]
plot(calibslist[[provinceName]], data = dd, predict_args=list(keep_vars=c("report", "death")))
}
##Test a forecast by plotting it on the same graph as the observed report data and the calibrate to it.
test_forecast_plot <- function(provinceName, sim = forecast_province(provinceName)){
plot(sim, drop_states = c("S", "R", "I", "cumRep", "E", "X", "D", "incidence", "ICU", "H")) +
##Add observed reported cases to the plot
geom_point(data = splitintervalCases[[provinceName]],
mapping = aes(x = date, y = value)) +
##Add observed deaths to the plot
geom_point(data = splitintervaldeaths[[provinceName]],
mapping = aes(x = date, y = value))
#+
##Add observed hospitalizations to the plot
#geom_point(data = splitintervalhosp[[provinceName]],
#           mapping = aes(x = date, y = value))
}
goodcalibs <- calibration_good()
goodcalibs <- calibrate_good()
test_calib_plot("QC")
test_calib_plot("ON")
test_calib_plot("SK")
library("dplyr") # For nice data frame manipulation
library("anytime") # Date/Time manipulation
library("lubridate") # Date/Time manipulation
library("chron") # Date/Time manipulation
library("ggplot2") # For fancy plots
library("epigrowthfit") # For pandemic model parameter estimation
library("McMasterPandemic") # For COVID-19 Pandemic Simulations and Forecasting
allcases <- read.csv("mikelidata.csv")
toKeep <- c("AB", "BC", "ON", "SK", "MB", "QC")
allcases <- allcases[allcases$Province %in% toKeep,]
pops <- c("AB" = 4421876,
"BC" = 5147712,
"ON" = 14734000,
"SK" = 1178681,
"MB" = 1379263,
"QC" = 8574571)
startdate <- anytime::anydate("2020-08-15")
splitinterval <- function(var){
if (var == "report"){
## colselect grabs the data from the main data frame and var tells the calibration function what variable the data is.
colselect <- "confirmed_positive"
var <- "report"
}
else if (var == "deaths"){
colselect <- "deceased"
var <- "death"
}
else{
colselect <- "Hospitalization"
var <-  "H"
}
lapply(as.vector(unique(allcases$Province)), function(provinceName){
## Select all the data corresponding to each province
casesdf <- allcases[as.vector(allcases$Province) == provinceName,]
## Remove missing values
casesdf <- casesdf[!is.na(casesdf[,colselect]),]
## Create interval incidence column by differencing
# Discard the first reported entry to align all the columns and keep them the same length, keeping the column for each province as a check to make sure we're doing everything properly.
intervalcasesdf <- bind_cols("Date" = casesdf$"Date",
"Province" =  casesdf$"Province",
"Note" = casesdf$"Note",
"intervalCases" = c(0, diff(casesdf[,colselect], lag = 1)))
## Removal of negative values
intervalcasesdf <- intervalcasesdf[intervalcasesdf$intervalCases >= 0,]
## Converting data to "long form" so that it can be passed to calibrate
colnames(intervalcasesdf) <- c("date", "a", "b", "value")
intervalcasesdf <- intervalcasesdf[,-c(2,3)]
intervalcasesdf$var <- rep(var, nrow(intervalcasesdf))
intervalcasesdf$date <- anytime::anydate(intervalcasesdf$date)
## Filtering data to begin at second wave (using startdate)
if (provinceName == "MB"){
startdate <- anytime::anydate("2020-09-15")
}
intervalcasesdf <- intervalcasesdf[intervalcasesdf$date >= startdate,]
return(intervalcasesdf)
})
}
splitintervalCases <- splitinterval(var = "report")
splitintervaldeaths <- splitinterval(var = "deaths")
splitintervalhosp <- splitinterval(var = "hosp")
names(splitintervalhosp) <- names(splitintervalCases) <- names(splitintervaldeaths) <- unique(allcases$Province)
pars <- read_params("ICU1.csv")
calibrate_good <- function(){
goodcalibs <- lapply(names(splitintervalCases), function(provinceName){
dd <-  bind_rows(splitintervalCases[[provinceName]], splitintervaldeaths[[provinceName]])
## Order by date
dd <- dd[order(anytime::anydate(dd$date)),]
provincereport <- splitintervalCases[[provinceName]]
## Use epigrowthfit to estimate R0 and then fix the parameter file for each province to match the estimated rate from the data and setting Gbar = 6
data(covid_generation_interval)
pars <- fix_pars(pars, target = c(R0 = compute_R0(egf(egf_init(date = provincereport$date, cases = provincereport$value)), breaks =  covid_generation_interval$breaks, probs = covid_generation_interval$probs), Gbar = 6))
## Set population size for each province
pars <- update(pars, c(N = pops[[provinceName]]))
init_e0 <- provincereport$value[[16]]
if (init_e0 == 0){
loginit_e0 <- 2
}
else{
loginit_e0 <- log(init_e0)
}
## Parameters to be optimized are based on the calibration to Ontario by Michael Li in
# https://github.com/bbolker/McMasterPandemic/blob/master/ontario/Ontario_current.R
optpars <- list(params = c(log_E0 = loginit_e0, log_beta0 = -1, logit_phi1 = -1), log_nb_disp=c(report=1, death=1, H=1))
## Calibration to SK deaths is not done due to noise.
if (provinceName == "SK"){
dd <- dd[dd$var == "report",]
}
else{
}
## Print which province is currently being calibrated
print(paste0("now calibrating ", provinceName))
## Calibration step
calibrate(base_params = pars,
data = dd,
debug_plot = FALSE,
## sim_args below based on the calibration to Ontario in
# https://github.com/bbolker/McMasterPandemic/blob/master/ontario/Ontario_current.R
sim_args = list(ndt = 1, ratemat_args = list(testing_time = "report")),
time_args = list(break_dates = NULL),
opt_pars = optpars)
})
names(goodcalibs) <- names(splitintervalCases)
return(goodcalibs)
}
##Our method that is not as good.
##Calibrate each province based on that provinces reported cases and the same set of base parameters.
calibrate_bad <- function(){
badcalibs <- lapply(names(splitintervalCases), function(provinceName){
dd <-  bind_rows(splitintervalCases[[provinceName]], splitintervaldeaths[[provinceName]])
##We need to order by date
dd <- dd[order(anytime::anydate(dd$date)),]
if (provinceName == "SK"){
dd <- dd[dd$var == "report",]
}
else{
}
provincereport <- splitintervalCases[[provinceName]]
##Use epigrowthfit to estimate R0 and then fix the parameter file for each province to match that estimated rate from the data.
data(covid_generation_interval)
pars <- fix_pars(pars, target = c(R0 = compute_R0(egf(egf_init(date = provincereport$date, cases = provincereport$value)), breaks =  covid_generation_interval$breaks, probs = covid_generation_interval$probs), Gbar = 6))
pars <- update(pars, c(N = pops[[provinceName]]))
##So we can see what's going on.
print(paste0("now calibrating ", provinceName))
calibrate(base_params = pars,
data = dd,
time_args = list(break_dates = NULL),
opt_pars = list(params = c(beta0 = 0.1)))
})
names(badcalibs) <- names(splitintervalCases)
return(badcalibs)
}
##Save a calibration so we don't have to run it again to get the same results.
savecalibs <- function(){
saveRDS(goodcalibs, "calibs.rds")
}
##Load a calibration that we saved using the filename above. Make sure calibs.rds is in your working directory.
loadcalibs <- function(){
return(readRDS("calibs.rds"))
}
forecast_province <- function(provinceName,
sd = anytime::anydate("2020-08-01"),
ed = anytime::anydate("2021-12-18"),
scenario = 1,
calibsList = goodcalibs,
lockdown_beta0 = 0.5,
lockdown_relax = 0.1,
phi2_1 = 0.1,
phi2_2 = 0.5,
isom_init = 0.7,
isos_init = 0.9){
calib <- calibsList[[provinceName]]
ff <- calib$forecast_args
pars <- ff$base_params
##Do these manually I guess.
#pars[["E0"]] <- coef(calib, "fitted")$params["E0"]
#pars[["beta0"]] <- coef(calib, "fitted")$params["beta0"]
#pars[["phi1"]] <- coef(calib, "fitted")$params["phi1"]
##The below line does the same thing. Lee, I'm leaving the above three in there so you can see.
pars[names(coef(calib, "fitted")$params)] <- coef(calib, "fitted")$params
##Stil don't now why this didn't work.
#pars <- update(pars, ff$opt_pars$params)
##The only thing that changes between scenarios is the time_pars.
if (scenario == 1){
##Status quo
time_pars <- NULL
}
else if (scenario == 2){
##Lockdown then relax six weeks after.
##Six weeks after is Jan 29th, 2021
time_pars <- data.frame(Date=c("2020-12-18", "2021-01-29"),
Symbol=c("beta0", "beta0"),
Relative_value=c(lockdown_beta0, lockdown_relax),
stringsAsFactors=FALSE)
}
else if (scenario == 3){
##ICU's fill up and then clear exactly a month later.
time_pars <- data.frame(Date=c("2020-01-15", "2021-02-15"),
Symbol=c("phi2", "phi2"),
Relative_value=c(phi2_1, phi2_2),
stringsAsFactors=FALSE)
}
else if (scenario == 4){
##Social distancing protocols are implemented.
pars <- update(pars, iso_m = isom_init, iso_s = isos_init)
time_pars <- data.frame(Date=c(startdate, startdate, "2020-12-18", "2020-12-18", "2021-02-18", "2021-02-18"),
Symbol=c("iso_m", "iso_s", "iso_m", "iso_s", "iso_m", "iso_s"),
Relative_value=c(0, 0, 1, 1, 0, 0),
stringsAsFactors=FALSE)
}
else{
}
sim <- run_sim(pars, start_date = sd, end_date = ed, params_timevar = time_pars)
return(sim)
pars <- update(pars, iso_m = 0, iso_s = 0)
}
##Plot a calibrated simulation, changing the provinceName to whatever we want it to be..
test_calib_plot <- function(provinceName, calibslist = goodcalibs, reportlist = splitintervalCases, deathlist = splitintervaldeaths, hosplist = splitintervalhosp){
dd <-  bind_rows(splitintervalCases[[provinceName]], splitintervaldeaths[[provinceName]])
##We might need to order by date, so it's safer to.
dd <- dd[order(anytime::anydate(dd$date)),]
plot(calibslist[[provinceName]], data = dd, predict_args=list(keep_vars=c("report", "death")))
}
##Test a forecast by plotting it on the same graph as the observed report data and the calibrate to it.
test_forecast_plot <- function(provinceName, sim = forecast_province(provinceName)){
plot(sim, drop_states = c("S", "R", "I", "cumRep", "E", "X", "D", "incidence", "ICU", "H")) +
##Add observed reported cases to the plot
geom_point(data = splitintervalCases[[provinceName]],
mapping = aes(x = date, y = value)) +
##Add observed deaths to the plot
geom_point(data = splitintervaldeaths[[provinceName]],
mapping = aes(x = date, y = value))
#+
##Add observed hospitalizations to the plot
#geom_point(data = splitintervalhosp[[provinceName]],
#           mapping = aes(x = date, y = value))
}
?fix_pars()
pars2 <- fix_pars(pars, pars_adj=list(c("sigma","gamma_s","gamma_m","gamma_a", "iso_m", "iso_s"))
)
pars2 <- fix_pars(pars, pars_adj=list(c("sigma","gamma_s","gamma_m","gamma_a", "iso_m", "iso_s")))
