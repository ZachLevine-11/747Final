no.update <- function(df) {
u <- which(df$Note == "did not update" | df$Note == " did not update")
x <- vector()
for (i in u) {
if (df$interval_incidence[i] == 0) {
x <- append(x, i)
}
}
if (length(x)>0) {
return(df[-x, ])
} else {
return(df)
}
}
ab1 <- no.update(remove.weekends(ab))
ab_mon <- ab1[-which(weekdays(ab1$Date) == "Monday"), ]
ab_mon <- ab_mon %>% group_by(Province) %>% filter(Date >= "2020-09-01")
ab_mon <- ab_mon %>% mutate(date = Date)
ab_mon <- ab_mon %>% mutate(report = interval_incidence)
params <- fix_pars(pars
, target=c(Gbar=6)
, pars_adj=list(c("sigma","gamma_s","gamma_m","gamma_a"))
)
params[["N"]] <- 4371000
params[["E0"]] <- 5
report_data <- (ab_mon
%>% mutate(value=round(report), var="report")
%>% select(date, value, var)
%>% na.omit())
optpars <- list(params = c(log_E0 = 2, log_beta0 = -1, logit_phi1 = -1), log_nb_disp=c(report=1, death=1, H=1))
fit <- calibrate(base_params = params,
data = report_data,
debug_plot = FALSE,
sim_args = list(ndt = 1, ratemat_args = list(testing_time = "report")),
time_args = list(break_dates = NULL),
opt_pars = optpars)
plot(fit,
data=report_data,
predict_args=list(keep_vars="report"),
directlabels = FALSE)
#--------------------------------------------------------------------------
#   LOADING R PACKAGES
#--------------------------------------------------------------------------
library(knitr) # For nice reports
library(ggplot2); theme_set(theme_bw()) # Suggested in McMasterPandemic vignette
library(cowplot) # Suggested in McMasterPandemic vignette
library(dplyr) # For nice data frame manipulation
library(lubridate) # For easy manipulation of dates
library(McMasterPandemic) # For COVID-19 Pandemic Simulations and Forecasting
#--------------------------------------------------------------------------
#   LOADING CSV FILES
#--------------------------------------------------------------------------
pars <- read_params("ICU1.csv") # A params_pansim object
covid_canada <- read.csv("COVID19_Canada.csv")
#--------------------------------------------------------------------------
#   ISOLATING ONTARIO DATA
#--------------------------------------------------------------------------
# Convert dates to date objects
can_cp <- covid_canada %>%
mutate(Date = ymd(Date))
# Creating interval incidence column
can_cp <- can_cp %>%
group_by(Province) %>%
mutate(interval_incidence = confirmed_positive - lag(confirmed_positive, default = 0))
# Remove all instances of negative interval incidence
can_cp <- can_cp %>%
filter(interval_incidence >= 0)
# Isolation of Provincial data
ab <- can_cp %>%
filter(Province == "AB")
bc <- can_cp %>%
filter(Province == "BC")
mb <- can_cp %>%
filter(Province == "MB")
qc <- can_cp %>%
filter(Province == "QC")
on <- can_cp %>%
filter(Province == "ON")
sk <- can_cp %>%
filter(Province == "SK")
remove.weekends <- function(df) {
x <- vector()
for (i in which(weekdays(df$Date) == "Saturday")) {
if (i+2<=length(df$Date) & weekdays(df$Date[i+1]) == "Sunday") {
df$interval_incidence[i+2] <- df$interval_incidence[i] + df$interval_incidence[i+1] + df$interval_incidence[i+2]
x <- append(x,c(i,i+1))
} else if (i+1 == length(df$Date) & weekdays(df$Date[i+1]) == "Sunday") {
x <- append(x,c(i,i+1))
} else if (i == length(df$Date)) {
x <- append(x,i)
}
}
return(df[-x, ])
}
# Given a dataframe df, the function no.updates removes all rows of df containing "did not update" in Note column and II=0.
no.update <- function(df) {
u <- which(df$Note == "did not update" | df$Note == " did not update")
x <- vector()
for (i in u) {
if (df$interval_incidence[i] == 0) {
x <- append(x, i)
}
}
if (length(x)>0) {
return(df[-x, ])
} else {
return(df)
}
}
ab1 <- no.update(remove.weekends(ab))
ab_mon <- ab1[-which(weekdays(ab1$Date) == "Monday"), ]
ab_mon <- ab_mon %>% group_by(Province) %>% filter(Date >= "2020-09-01")
ab_mon <- ab_mon %>% mutate(date = Date)
ab_mon <- ab_mon %>% mutate(report = interval_incidence)
params <- fix_pars(pars
, target=c(Gbar=6)
, pars_adj=list(c("sigma","gamma_s","gamma_m","gamma_a"))
)
params[["N"]] <- 4371000
report_data <- (ab_mon
%>% mutate(value=round(report), var="report")
%>% select(date, value, var)
%>% na.omit())
optpars <- list(params = c(log_E0 = 2, log_beta0 = -1, logit_phi1 = -1), log_nb_disp=c(report=1, death=1, H=1))
fit <- calibrate(base_params = params,
data = report_data,
debug_plot = FALSE,
sim_args = list(ndt = 1, ratemat_args = list(testing_time = "report")),
time_args = list(break_dates = NULL),
opt_pars = optpars)
plot(fit,
data=report_data,
predict_args=list(keep_vars="report"),
directlabels = FALSE)
#--------------------------------------------------------------------------
#   LOADING R PACKAGES
#--------------------------------------------------------------------------
library(knitr) # For nice reports
library(ggplot2); theme_set(theme_bw()) # Suggested in McMasterPandemic vignette
library(cowplot) # Suggested in McMasterPandemic vignette
library(dplyr) # For nice data frame manipulation
library(lubridate) # For easy manipulation of dates
library(McMasterPandemic) # For COVID-19 Pandemic Simulations and Forecasting
#--------------------------------------------------------------------------
#   LOADING CSV FILES
#--------------------------------------------------------------------------
pars <- read_params("ICU1.csv") # A params_pansim object
covid_canada <- read.csv("COVID19_Canada.csv")
#--------------------------------------------------------------------------
#   ISOLATING ONTARIO DATA
#--------------------------------------------------------------------------
# Convert dates to date objects
can_cp <- covid_canada %>%
mutate(Date = ymd(Date))
# Creating interval incidence column
can_cp <- can_cp %>%
group_by(Province) %>%
mutate(interval_incidence = confirmed_positive - lag(confirmed_positive, default = 0))
# Remove all instances of negative interval incidence
can_cp <- can_cp %>%
filter(interval_incidence >= 0)
# Isolation of Provincial data
ab <- can_cp %>%
filter(Province == "AB")
bc <- can_cp %>%
filter(Province == "BC")
mb <- can_cp %>%
filter(Province == "MB")
qc <- can_cp %>%
filter(Province == "QC")
on <- can_cp %>%
filter(Province == "ON")
sk <- can_cp %>%
filter(Province == "SK")
remove.weekends <- function(df) {
x <- vector()
for (i in which(weekdays(df$Date) == "Saturday")) {
if (i+2<=length(df$Date) & weekdays(df$Date[i+1]) == "Sunday") {
df$interval_incidence[i+2] <- df$interval_incidence[i] + df$interval_incidence[i+1] + df$interval_incidence[i+2]
x <- append(x,c(i,i+1))
} else if (i+1 == length(df$Date) & weekdays(df$Date[i+1]) == "Sunday") {
x <- append(x,c(i,i+1))
} else if (i == length(df$Date)) {
x <- append(x,i)
}
}
return(df[-x, ])
}
# Given a dataframe df, the function no.updates removes all rows of df containing "did not update" in Note column and II=0.
no.update <- function(df) {
u <- which(df$Note == "did not update" | df$Note == " did not update")
x <- vector()
for (i in u) {
if (df$interval_incidence[i] == 0) {
x <- append(x, i)
}
}
if (length(x)>0) {
return(df[-x, ])
} else {
return(df)
}
}
ab1 <- no.update(remove.weekends(ab))
ab_mon <- ab1[-which(weekdays(ab1$Date) == "Monday"), ]
ab_mon <- ab_mon %>% group_by(Province) %>% filter(Date >= "2020-09-01")
ab_mon <- ab_mon %>% mutate(date = Date)
ab_mon <- ab_mon %>% mutate(report = interval_incidence)
params <- fix_pars(pars
, target=c(Gbar=6)
, pars_adj=list(c("sigma","gamma_s","gamma_m","gamma_a"))
)
params[["N"]] <- 4371000
report_data <- (ab_mon
%>% mutate(value=round(report), var="report")
%>% select(date, value, var)
%>% na.omit())
optpars <- list(params = c(log_E0 = 2, log_beta0 = -1, logit_phi1 = -1), log_nb_disp=c(report=2, death=1, H=1))
fit <- calibrate(base_params = params,
data = report_data,
debug_plot = FALSE,
sim_args = list(ndt = 1, ratemat_args = list(testing_time = "report")),
time_args = list(break_dates = NULL),
opt_pars = optpars)
plot(fit,
data=report_data,
predict_args=list(keep_vars="report"),
directlabels = FALSE)
#--------------------------------------------------------------------------
#   LOADING R PACKAGES
#--------------------------------------------------------------------------
library(knitr) # For nice reports
library(ggplot2); theme_set(theme_bw()) # Suggested in McMasterPandemic vignette
library(cowplot) # Suggested in McMasterPandemic vignette
library(dplyr) # For nice data frame manipulation
library(lubridate) # For easy manipulation of dates
library(McMasterPandemic) # For COVID-19 Pandemic Simulations and Forecasting
#--------------------------------------------------------------------------
#   LOADING CSV FILES
#--------------------------------------------------------------------------
pars <- read_params("ICU1.csv") # A params_pansim object
covid_canada <- read.csv("COVID19_Canada.csv")
#--------------------------------------------------------------------------
#   ISOLATING ONTARIO DATA
#--------------------------------------------------------------------------
# Convert dates to date objects
can_cp <- covid_canada %>%
mutate(Date = ymd(Date))
# Creating interval incidence column
can_cp <- can_cp %>%
group_by(Province) %>%
mutate(interval_incidence = confirmed_positive - lag(confirmed_positive, default = 0))
# Remove all instances of negative interval incidence
can_cp <- can_cp %>%
filter(interval_incidence >= 0)
# Isolation of Provincial data
ab <- can_cp %>%
filter(Province == "AB")
bc <- can_cp %>%
filter(Province == "BC")
mb <- can_cp %>%
filter(Province == "MB")
qc <- can_cp %>%
filter(Province == "QC")
on <- can_cp %>%
filter(Province == "ON")
sk <- can_cp %>%
filter(Province == "SK")
remove.weekends <- function(df) {
x <- vector()
for (i in which(weekdays(df$Date) == "Saturday")) {
if (i+2<=length(df$Date) & weekdays(df$Date[i+1]) == "Sunday") {
df$interval_incidence[i+2] <- df$interval_incidence[i] + df$interval_incidence[i+1] + df$interval_incidence[i+2]
x <- append(x,c(i,i+1))
} else if (i+1 == length(df$Date) & weekdays(df$Date[i+1]) == "Sunday") {
x <- append(x,c(i,i+1))
} else if (i == length(df$Date)) {
x <- append(x,i)
}
}
return(df[-x, ])
}
# Given a dataframe df, the function no.updates removes all rows of df containing "did not update" in Note column and II=0.
no.update <- function(df) {
u <- which(df$Note == "did not update" | df$Note == " did not update")
x <- vector()
for (i in u) {
if (df$interval_incidence[i] == 0) {
x <- append(x, i)
}
}
if (length(x)>0) {
return(df[-x, ])
} else {
return(df)
}
}
ab1 <- no.update(remove.weekends(ab))
ab_mon <- ab1[-which(weekdays(ab1$Date) == "Monday"), ]
ab_mon <- ab_mon %>% group_by(Province) %>% filter(Date >= "2020-09-01")
ab_mon <- ab_mon %>% mutate(date = Date)
ab_mon <- ab_mon %>% mutate(report = interval_incidence)
params <- fix_pars(pars
, target=c(Gbar=6)
, pars_adj=list(c("sigma","gamma_s","gamma_m","gamma_a"))
)
params[["N"]] <- 4371000
report_data <- (ab_mon
%>% mutate(value=round(report), var="report")
%>% select(date, value, var)
%>% na.omit())
optpars <- list(params = c(log_E0 = 2, log_beta0 = -1, logit_phi1 = -1), log_nb_disp=c(report=0.5, death=1, H=1))
fit <- calibrate(base_params = params,
data = report_data,
debug_plot = FALSE,
sim_args = list(ndt = 1, ratemat_args = list(testing_time = "report")),
time_args = list(break_dates = NULL),
opt_pars = optpars)
plot(fit,
data=report_data,
predict_args=list(keep_vars="report"),
directlabels = FALSE)
?run_sim()
?calibrate()
#--------------------------------------------------------------------------
#   LOADING R PACKAGES
#--------------------------------------------------------------------------
library(knitr) # For nice reports
library(ggplot2); theme_set(theme_bw()) # Suggested in McMasterPandemic vignette
library(cowplot) # Suggested in McMasterPandemic vignette
library(dplyr) # For nice data frame manipulation
library(lubridate) # For easy manipulation of dates
library(McMasterPandemic) # For COVID-19 Pandemic Simulations and Forecasting
#--------------------------------------------------------------------------
#   LOADING CSV FILES
#--------------------------------------------------------------------------
pars <- read_params("ICU1.csv") # A params_pansim object
covid_canada <- read.csv("COVID19_Canada.csv")
#--------------------------------------------------------------------------
#   ISOLATING ONTARIO DATA
#--------------------------------------------------------------------------
# Convert dates to date objects
can_cp <- covid_canada %>%
mutate(Date = ymd(Date))
# Creating interval incidence column
can_cp <- can_cp %>%
group_by(Province) %>%
mutate(interval_incidence = confirmed_positive - lag(confirmed_positive, default = 0))
# Remove all instances of negative interval incidence
can_cp <- can_cp %>%
filter(interval_incidence >= 0)
# Isolation of Provincial data
ab <- can_cp %>%
filter(Province == "AB")
bc <- can_cp %>%
filter(Province == "BC")
mb <- can_cp %>%
filter(Province == "MB")
qc <- can_cp %>%
filter(Province == "QC")
on <- can_cp %>%
filter(Province == "ON")
sk <- can_cp %>%
filter(Province == "SK")
remove.weekends <- function(df) {
x <- vector()
for (i in which(weekdays(df$Date) == "Saturday")) {
if (i+2<=length(df$Date) & weekdays(df$Date[i+1]) == "Sunday") {
df$interval_incidence[i+2] <- df$interval_incidence[i] + df$interval_incidence[i+1] + df$interval_incidence[i+2]
x <- append(x,c(i,i+1))
} else if (i+1 == length(df$Date) & weekdays(df$Date[i+1]) == "Sunday") {
x <- append(x,c(i,i+1))
} else if (i == length(df$Date)) {
x <- append(x,i)
}
}
return(df[-x, ])
}
# Given a dataframe df, the function no.updates removes all rows of df containing "did not update" in Note column and II=0.
no.update <- function(df) {
u <- which(df$Note == "did not update" | df$Note == " did not update")
x <- vector()
for (i in u) {
if (df$interval_incidence[i] == 0) {
x <- append(x, i)
}
}
if (length(x)>0) {
return(df[-x, ])
} else {
return(df)
}
}
ab1 <- no.update(remove.weekends(ab))
ab_mon <- ab1[-which(weekdays(ab1$Date) == "Monday"), ]
ab_mon <- ab_mon %>% group_by(Province) %>% filter(Date >= "2020-09-01")
ab_mon <- ab_mon %>% mutate(date = Date)
ab_mon <- ab_mon %>% mutate(report = interval_incidence)
params <- fix_pars(pars
, target=c(Gbar=6)
, pars_adj=list(c("sigma","gamma_s","gamma_m","gamma_a"))
)
params[["N"]] <- 4371000
report_data <- (ab_mon
%>% mutate(value=round(report), var="report")
%>% select(date, value, var)
%>% na.omit())
optpars <- list(params = c(log_E0 = 2, log_beta0 = -1, logit_phi1 = -1))
fit <- calibrate(base_params = params,
data = report_data,
debug_plot = FALSE,
sim_args = list(ndt = 1, ratemat_args = list(testing_time = "report")),
time_args = list(break_dates = NULL),
opt_pars = optpars)
plot(fit,
data=report_data,
predict_args=list(keep_vars="report"),
directlabels = FALSE)
#--------------------------------------------------------------------------
#   LOADING R PACKAGES
#--------------------------------------------------------------------------
library(knitr) # For nice reports
library(ggplot2); theme_set(theme_bw()) # Suggested in McMasterPandemic vignette
library(cowplot) # Suggested in McMasterPandemic vignette
library(dplyr) # For nice data frame manipulation
library(lubridate) # For easy manipulation of dates
library(McMasterPandemic) # For COVID-19 Pandemic Simulations and Forecasting
#--------------------------------------------------------------------------
#   LOADING CSV FILES
#--------------------------------------------------------------------------
pars <- read_params("ICU1.csv") # A params_pansim object
covid_canada <- read.csv("COVID19_Canada.csv")
#--------------------------------------------------------------------------
#   ISOLATING ONTARIO DATA
#--------------------------------------------------------------------------
# Convert dates to date objects
can_cp <- covid_canada %>%
mutate(Date = ymd(Date))
# Creating interval incidence column
can_cp <- can_cp %>%
group_by(Province) %>%
mutate(interval_incidence = confirmed_positive - lag(confirmed_positive, default = 0))
# Remove all instances of negative interval incidence
can_cp <- can_cp %>%
filter(interval_incidence >= 0)
# Isolation of Provincial data
ab <- can_cp %>%
filter(Province == "AB")
bc <- can_cp %>%
filter(Province == "BC")
mb <- can_cp %>%
filter(Province == "MB")
qc <- can_cp %>%
filter(Province == "QC")
on <- can_cp %>%
filter(Province == "ON")
sk <- can_cp %>%
filter(Province == "SK")
remove.weekends <- function(df) {
x <- vector()
for (i in which(weekdays(df$Date) == "Saturday")) {
if (i+2<=length(df$Date) & weekdays(df$Date[i+1]) == "Sunday") {
df$interval_incidence[i+2] <- df$interval_incidence[i] + df$interval_incidence[i+1] + df$interval_incidence[i+2]
x <- append(x,c(i,i+1))
} else if (i+1 == length(df$Date) & weekdays(df$Date[i+1]) == "Sunday") {
x <- append(x,c(i,i+1))
} else if (i == length(df$Date)) {
x <- append(x,i)
}
}
return(df[-x, ])
}
# Given a dataframe df, the function no.updates removes all rows of df containing "did not update" in Note column and II=0.
no.update <- function(df) {
u <- which(df$Note == "did not update" | df$Note == " did not update")
x <- vector()
for (i in u) {
if (df$interval_incidence[i] == 0) {
x <- append(x, i)
}
}
if (length(x)>0) {
return(df[-x, ])
} else {
return(df)
}
}
ab1 <- no.update(remove.weekends(ab))
ab_mon <- ab1[-which(weekdays(ab1$Date) == "Monday"), ]
ab_mon <- ab_mon %>% group_by(Province) %>% filter(Date >= "2020-09-01")
ab_mon <- ab_mon %>% mutate(date = Date)
ab_mon <- ab_mon %>% mutate(report = interval_incidence)
params <- fix_pars(pars
, target=c(Gbar=6)
, pars_adj=list(c("sigma","gamma_s","gamma_m","gamma_a"))
)
params[["N"]] <- 4371000
report_data <- (ab_mon
%>% mutate(value=round(report), var="report")
%>% select(date, value, var)
%>% na.omit())
optpars <- list(params = c(log_E0 = 2, log_beta0 = -1, logit_phi1 = -1), log_nb_disp=c(report=1, death=1, H=1))
fit <- calibrate(base_params = params,
data = report_data,
debug_plot = FALSE,
sim_args = list(ndt = 1, ratemat_args = list(testing_time = "report")),
time_args = list(break_dates = NULL),
opt_pars = optpars)
plot(fit,
data=report_data,
predict_args=list(keep_vars="report"),
directlabels = FALSE)
